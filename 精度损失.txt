  /** 
     ** 加 
     **/  
    function jia(arg1, arg2) {  
      var r1, r2, m, c;  
      try {  
        r1 = arg1.toString().split(".")[1].length;  
      }  
      catch (e) {  
        r1 = 0;  
      }  
      try {  
        r2 = arg2.toString().split(".")[1].length;  
      }  
      catch (e) {  
        r2 = 0;  
      }  
      c = Math.abs(r1 - r2);  
      m = Math.pow(10, Math.max(r1, r2));  
      if (c > 0) {  
        var cm = Math.pow(10, c);  
        if (r1 > r2) {  
          arg1 = Number(arg1.toString().replace(".", ""));  
          arg2 = Number(arg2.toString().replace(".", "")) * cm;  
        } else {  
          arg1 = Number(arg1.toString().replace(".", "")) * cm;  
          arg2 = Number(arg2.toString().replace(".", ""));  
        }  
      } else {  
        arg1 = Number(arg1.toString().replace(".", ""));  
        arg2 = Number(arg2.toString().replace(".", ""));  
      }  
      return (arg1 + arg2) / m;  
    };  
      
    /** 
     ** 减 
     **/  
    function jian(arg1, arg2) {  
      var r1, r2, m, n;  
      try {  
        r1 = arg1.toString().split(".")[1].length;  
      }  
      catch (e) {  
        r1 = 0;  
      }  
      try {  
        r2 = arg2.toString().split(".")[1].length;  
      }  
      catch (e) {  
        r2 = 0;  
      }  
      m = Math.pow(10, Math.max(r1, r2)); //last modify by deeka //动态控制精度长度  
      n = (r1 >= r2) ? r1 : r2;  
      return Number(((arg1 * m - arg2 * m) / m).toFixed(n));  
    };  
      
    /** 
     ** 乘 
     **/  
    function cheng(arg1, arg2) {  
      var m = 0, s1 = arg1.toString(), s2 = arg2.toString();  
      try {  
        m += s1.split(".")[1].length;  
      }  
      catch (e) {  
      }  
      try {  
        m += s2.split(".")[1].length;  
      }  
      catch (e) {  
      }  
      return Number(s1.replace(".", "")) * Number(s2.replace(".", "")) / Math.pow(10, m);  
    };  
      
    /** 
     ** 除 
     **/  
    function chu(arg1, arg2) {  
      var t1 = 0, t2 = 0, r1, r2;  
      try {  
        t1 = arg1.toString().split(".")[1].length;  
      }  
      catch (e) {  
      }  
      try {  
        t2 = arg2.toString().split(".")[1].length;  
      }  
      catch (e) {  
      }  
      with (Math) {  
        r1 = Number(arg1.toString().replace(".", ""));  
        r2 = Number(arg2.toString().replace(".", ""));  
        return (r1 / r2) * pow(10, t2 - t1);  
      }  
    };  


var operationNumber = function (arg1,arg2,operator) {
    var oper=['+','-','*','/'];
    // 不合法的运算
    if (isNaN(arg1)||isNaN(arg2)||oper.indexOf(operator)<0) {
        return NaN;
    }
    // 除以0
    if (operator==='/'&&Number(arg2)===0) {
        return Infinity;
    }
    // 和0相乘
    if (operator==='*'&&Number(arg2)===0) {
        return 0;
    }
    // 相等两个数字相减
    if ((arg1===arg2||Number(arg1)===Number(arg2))&&operator==='-') {
        return 0;
    }
    var r1, //小数位数
     r2, //小数位数
     max,_r1,_r2;
    try { r1 = arg1.toString().split(".")[1].length } catch (e) { r1 = 0 }
    try { r2 = arg2.toString().split(".")[1].length } catch (e) { r2 = 0 }
    max = Math.max(r1, r2)
    _r1 = max-r1;
    _r2 = max-r2;
    if (_r1!==0) {
        arg1=arg1+'0'.repeat(_r1)
    }//arg1小数位少,少几位数，则用0补齐
    if (_r2!==0) {
        arg2=arg2+'0'.repeat(_r2)
    } //arg2小数位少
    arg1 = Number(arg1.toString().replace('.',''))//去掉小数点
    arg2 = Number(arg2.toString().replace('.',''))//去掉小数点
    var r3 = operator==='*'?(max*2):(operator==='/'?0:max); //要去掉的位数
    var newNum = eval(arg1+operator+arg2);
    if (r3!==0) {
        var nStr = newNum.toString();
        nStr = nStr.replace(/^-/,'');
        if (nStr.length<r3+1) {
            nStr = '0'.repeat(r3+1-nStr.length)+nStr;
        }
        nStr = nStr.replace(new RegExp('(\\\d{'+r3+'})$'),'.$1');
        if (newNum<0) {
            nStr = '-'+nStr;
        }
        newNum = nStr*1;
    }
    return newNum;
}
//加法 
Number.prototype.myAdd = function(arg2) {
    return operationNumber(this,arg2,'+');
}
//减法 
Number.prototype.mySub = function(arg2) {
    return operationNumber(this,arg2,'-');
}
//乘法 
Number.prototype.myMul = function(arg2) {
    return operationNumber(this,arg2,'*');
}
// 除法
Number.prototype.myDiv = function(arg2) {
    return operationNumber(this,arg2,'/');
}
